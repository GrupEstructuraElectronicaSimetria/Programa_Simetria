!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module shp ! in 
    interface  ! in :shp
        module cominfo ! in :shp:shp.f90
            integer, public,parameter,optional :: idlmx=12
            character*40, public :: input
            character*2, public :: asop
            real(kind=8), public :: thrdev
            real(kind=8), public,parameter,optional :: sq3=3._rnp*1.7320508075688772_rnp
            integer, public :: idw
            character, public,dimension(61,4) :: eq
            logical, public :: ifltc
            integer, public,dimension(15,200,61) :: pmt
            logical, public :: iflnm
            logical, public :: icor
            integer, public,parameter,optional :: ide_fl=52
            real(kind=8), public :: cogen
            real(kind=8), public,parameter,optional :: radians=3.1415926535897931_rnp/180._rnp
            integer, public :: nl
            real(kind=8), public :: pathk
            logical, public :: iflt
            logical, public :: itst
            logical, public :: ifixp
            logical, public :: ipath
            character*10, public,parameter,optional :: digit='0123456789'
            real(kind=8), public :: maxcsm
            integer, public,parameter,optional :: pth_fl=69
            real(kind=8), public,dimension(16,61,3) :: p0
            character*40, public :: output
            real(kind=8), public :: fnor
            logical, public :: ifltg
            real(kind=8), public,dimension(61,3) :: pf
            logical, public :: islct
            integer, public :: iwap
            character*80, public :: titol
            real(kind=8), public :: mincsm
            real(kind=8), public,dimension(61,3) :: qn
            integer, public :: mef
            integer, public,parameter,optional :: xyz_fl=62
            integer, public,parameter,optional :: shp_fl=51
            real(kind=8), public,parameter,optional :: eps=10._rnp*epsilon(0._rnp)
            integer, public,parameter,optional :: out_fl=60
            character*15, public :: aslct
            logical, public :: itab
            real(kind=8), public,dimension(61,3) :: pw
            integer, public :: mnf
            character, public,dimension(16,75) :: dcr
            logical, public :: istop
            real(kind=8), public :: maxdev
            logical, public :: ilbl
            character, public,parameter,optional,dimension(18,100),depend(mingco,mincsm,maxdev,maxgco,maxcsm,mindev) :: help=(/"%conquest      - reads atomic coordinates generated by csd's conquest program.                      ","%external-reads atomic coordinates from an external xyz file.","%fixperm-restricts the calculation to a user-defined permutation.","%fullout-generates coordinates of the reference shapes closest to each structure.","%maxcsm x-filters out structures whose shape measures are larger than x.","%maxdev x-filters out structures whose path deviation functions are larger than x.","also used as threshold to calculate generalized coordinate.","%maxgco x-filters out structures whose generalized coordinates are larger than x.","%mincsm x-filters out structures whose shape measures are smaller than x.","%mindev x-filters out structures whose path deviation functions are smaller than x.","%mingco x-filters out structures whose generalized coordinates are smaller than x.","%nosymbol-reads atomic coordinates without atomic symbols.","%path-performs analysis of structures along a minimal distortion pathway.","%reference-employs one or more user-defined reference shapes.","%select label-gives shape measures only for the structure with given label.","%stop n-stops after analyzing n structures.","%test-generates xyz files of reference shapes used.","structures along pathway are also generated when combined with %path."/)
            logical, public :: ilblx
            real(kind=8), public :: amx
            integer, public :: nes
            character*4, public :: tpl
            integer, public,parameter,optional :: nlmx=60
            logical, public :: screen
            integer, public :: mt
            real(kind=8), public,dimension(61,3) :: q0
            integer, public,dimension(15) :: npe
            real(kind=8), public :: devia
            integer, public :: mxsop
            integer, public :: nstop
            logical, public :: ilst
            integer, public :: nfixp
            character*15, public :: refc
            character*40, public :: inpshp
            logical, public :: found_ideal
            integer, public :: ilect
            character*40, public :: opt
            integer, public,parameter,optional :: tab_fl=61
            integer, public,parameter,optional :: csv_fl=68
            integer, public :: m
            character, public,dimension(16,5) :: sim
            real(kind=8), public :: thrdev0
            integer, public :: iwaq
            character, public,parameter,optional,dimension(3,62) :: welco=(/"s h a p e   v2.1         continuous shape measures calculation","(c)2013electronic structure group, universitat de barcelona","contact:llunell@ub.edu"/)
            character, public,dimension(16,12) :: iup
            character, public,dimension(61,4) :: ep
            integer, public,dimension(15) :: idl
            character*40, public :: inpshpx
            integer, public,parameter,optional :: npemx=200
            character*15, public :: refaux
            integer, public,parameter,optional :: inp_fl=50
            real(kind=8), public,dimension(3) :: cmq
            logical, public :: nl_found
            integer, public :: ishp
            integer, public :: nid
            real(kind=8), public,dimension(15) :: vs
            logical, public :: iout
            real(kind=8), public :: maxgco
            integer, public,parameter,optional :: rnp=8
            real(kind=8), public :: mingco
            integer, public,parameter,optional,depend(nlmx) :: mmx=61
            real(kind=8), public,parameter,optional :: hug=huge(0._rnp)/2._rnp
            logical, public :: ixyz
            logical, public :: ioutx
            character, public,dimension(61,4) :: ef
            integer, public,parameter,optional :: nidmx=15
            integer, public,parameter,optional :: flt_fl=63
            integer, public,dimension(61) :: fixp
            character*10, public :: eqaux
            real(kind=8), public :: mindev
            character*40, public :: inpide
            logical, public :: ipmx
            logical, public :: ifltd
        end module cominfo
        function cshm(cd_py,na_py,mt_py,id_py) ! in :shp:shp.f90
            use cominfo
            real(kind=8) dimension(na_py,3) :: cd_py
            integer, optional,check(shape(cd_py,0)==na_py),depend(cd_py), intent(hide) :: na_py=shape(cd_py,0)
            logical, optional :: mt_py
            integer :: id_py
            real(kind=8) :: cshm
        end function cshm
        subroutine poly(cd_py,na_py,mt_py,id_py,pl_py,cm_py) ! in :shp:shp.f90
            use cominfo
            real(kind=8) dimension(na_py,3) :: cd_py
            integer, optional,check(shape(cd_py,0)==na_py),depend(cd_py), intent(hide) :: na_py=shape(cd_py,0)
            logical, optional :: mt_py
            integer :: id_py
            real(kind=8) dimension(na_py,3),intent(out),depend(na_py) :: pl_py
            real(kind=8) intent(out) :: cm_py
        end subroutine poly
        subroutine test(cd_py,na_py,mt_py,id_py,pl_py) ! in :shp:shp.f90
            use cominfo
            real(kind=8) dimension(na_py,3) :: cd_py
            integer, optional,check(shape(cd_py,0)==na_py),depend(cd_py), intent(hide) :: na_py=shape(cd_py,0)
            logical, optional :: mt_py
            integer :: id_py
            real(kind=8) dimension(na_py,3),intent(out),depend(na_py) :: pl_py
        end subroutine test
        subroutine nextline(iunit) ! in :shp:shp.f90
            integer intent(in) :: iunit
        end subroutine nextline
        function csm(icsm) ! in :shp:shp.f90
            use cominfo
            integer :: icsm
            real(kind=8) :: csm
        end function csm
        function suml(h) ! in :shp:shp.f90
            real(kind=8) dimension(3,3),intent(in) :: h
            real(kind=8) :: suml
        end function suml
        subroutine svd(ci,cd,a,r) ! in :shp:shp.f90
            use cominfo
            real(kind=8) dimension(61,3),intent(in) :: ci
            real(kind=8) dimension(61,3),intent(in) :: cd
            real(kind=8) intent(out) :: a
            real(kind=8) dimension(3,3),intent(out) :: r
        end subroutine svd
        subroutine get_topology ! in :shp:shp.f90
            use cominfo
        end subroutine get_topology
        subroutine anl_geometry(nstr) ! in :shp:shp.f90
            use cominfo
            integer intent(in) :: nstr
        end subroutine anl_geometry
        subroutine ideal_str(ichk) ! in :shp:shp.f90
            use cominfo
            integer intent(in) :: ichk
        end subroutine ideal_str
        subroutine equivper ! in :shp:shp.f90
            use cominfo
        end subroutine equivper
    end interface 
end python module shp

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
